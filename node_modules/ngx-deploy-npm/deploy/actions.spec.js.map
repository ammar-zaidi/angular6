{"version":3,"file":"actions.spec.js","sourceRoot":"","sources":["../../deploy/actions.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonObject, logging } from '@angular-devkit/core';\nimport {\n  BuilderContext,\n  BuilderRun,\n  ScheduleOptions,\n  Target\n} from '@angular-devkit/architect/src/index';\nimport deploy from './actions';\n\nlet context: BuilderContext;\nconst mockEngine = { run: (_: string, __: any, __2: any) => Promise.resolve() };\n\nconst PROJECT = 'pirojok-project';\n\ndescribe('Deploy Angular apps', () => {\n  beforeEach(() => initMocks());\n\n  describe('Builder', () => {\n    let spy: jest.SpyInstance;\n\n    beforeEach(() => {\n      spy = jest.spyOn(context, 'scheduleTarget');\n    });\n\n    it('should invoke the builder', async () => {\n      await deploy(mockEngine, context, 'host', {});\n\n      expect(spy).toHaveBeenCalledWith({\n        target: 'build',\n        project: PROJECT\n      });\n    });\n\n    it('should invoke the builder with the right configuration', async () => {\n      const customConf = 'my-custom-conf';\n\n      await deploy(mockEngine, context, 'host', {\n        configuration: customConf\n      });\n\n      expect(spy).toHaveBeenCalledWith({\n        target: 'build',\n        project: PROJECT,\n        configuration: customConf\n      });\n    });\n  });\n\n  it('should invoke engine.run', async () => {\n    const spy = spyOn(mockEngine, 'run').and.callThrough();\n    await deploy(mockEngine, context, 'host', {});\n\n    expect(spy).toHaveBeenCalledWith('host', {}, context.logger);\n  });\n\n  describe('error handling', () => {\n    it('throws if there is no target project', async () => {\n      context.target = undefined;\n      try {\n        await deploy(mockEngine, context, 'host', {});\n        fail();\n      } catch (e) {\n        expect(e.message).toMatch(/Cannot execute the build target/);\n      }\n    });\n  });\n});\n\nconst initMocks = () => {\n  context = {\n    target: {\n      configuration: 'production',\n      project: PROJECT,\n      target: 'foo'\n    },\n    builder: {\n      builderName: 'mock',\n      description: 'mock',\n      optionSchema: false\n    },\n    currentDirectory: 'cwd',\n    id: 1,\n    logger: new logging.NullLogger() as any,\n    workspaceRoot: 'cwd',\n    addTeardown: _ => {},\n    validateOptions: _ => Promise.resolve({} as any),\n    getBuilderNameForTarget: () => Promise.resolve(''),\n    analytics: null as any,\n    getTargetOptions: (_: Target) => Promise.resolve({}),\n    reportProgress: (_: number, __?: number, ___?: string) => {},\n    reportStatus: (_: string) => {},\n    reportRunning: () => {},\n    scheduleBuilder: (_: string, __?: JsonObject, ___?: ScheduleOptions) =>\n      Promise.resolve({} as BuilderRun),\n    scheduleTarget: (_: Target, __?: JsonObject, ___?: ScheduleOptions) =>\n      Promise.resolve({} as BuilderRun)\n  };\n};\n"]}