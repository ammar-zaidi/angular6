{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../deploy/builder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,yDAImC;AACnC,+CAA8E;AAC9E,oDAA2D;AAC3D,4CAAoB;AACpB,2CAA6B;AAE7B,yDAA2C;AAC3C,wDAA+B;AAK/B,kBAAe,yBAAa,CAC1B,CAAO,OAAe,EAAE,OAAuB,EAA0B,EAAE;IAEzE,MAAM,IAAI,GAAG,gBAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,IAAI,mBAAY,CAAC,SAAS,CAAC,SAAS,CACpD,IAAI,EACJ,IAAI,qBAAc,EAAE,CACrB,CAAC;IACF,MAAM,SAAS;SACZ,qBAAqB,CAAC,gBAAS,CAAC,cAAc,CAAC,CAAC;SAChD,SAAS,EAAE,CAAC;IAEf,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;KACnE;IAED,MAAM,OAAO,GAAG,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAEpE,MAAM,UAAU,GAAG,MAAM,oBAAoB,CAAC,OAAO,CAAC,CAAC;IAIvD,MAAM,KAAK,GAAG,YAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC;IACxC,MAAM,aAAa,GAAG,CAAC,KAAK;QAC1B,CAAC,CAAC,SAAS,CAAC,IAAI;QAChB,CAAC,CAAC,oBAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAIlC,IAAI;QACF,MAAM,iBAAM,CACV,MAAM,EACN,OAAO,EACP,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC,EACpC,OAAO,CACR,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,CAAC,CAAC,CAAC;QACxD,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;KAC3B;IAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC,CAAA,CACF,CAAC;AAEF,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,SAAS,aAAa,CAAI,IAAY;IACpC,OAAO,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC9B,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,UAAS,GAAG,EAAE,QAAQ;YAC9C,IAAI,GAAG;gBAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAElB,GAAG,CAAC,QAAQ,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAe,oBAAoB,CACjC,OAA6C;;QAE7C,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;QAEpD,IAAI;YACF,MAAM,OAAO,GAAG,MAAM,aAAa,CAAS,aAAa,CAAC,CAAC;YAC3D,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEjC,MAAM,QAAQ,GAAI,IAAI,CAAC,IAAe,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAE9D,OAAO,QAAQ,CAAC;SACjB;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAChE;IACH,CAAC;CAAA","sourcesContent":["import {\n  BuilderContext,\n  BuilderOutput,\n  createBuilder\n} from '@angular-devkit/architect';\nimport { asWindowsPath, experimental, normalize } from '@angular-devkit/core';\nimport { NodeJsSyncHost } from '@angular-devkit/core/node';\nimport os from 'os';\nimport * as path from 'path';\n\nimport * as engine from '../engine/engine';\nimport deploy from './actions';\nimport { Schema } from './schema';\n\n// Call the createBuilder() function to create a builder. This mirrors\n// createJobHandler() but add typings specific to Architect Builders.\nexport default createBuilder<any>(\n  async (options: Schema, context: BuilderContext): Promise<BuilderOutput> => {\n    // The project root is added to a BuilderContext.\n    const root = normalize(context.workspaceRoot);\n    const workspace = new experimental.workspace.Workspace(\n      root,\n      new NodeJsSyncHost()\n    );\n    await workspace\n      .loadWorkspaceFromHost(normalize('angular.json'))\n      .toPromise();\n\n    if (!context.target) {\n      throw new Error('Cannot deploy the application without a target');\n    }\n\n    const targets = workspace.getProjectTargets(context.target.project);\n\n    const outputPath = await getLibraryOutputPath(targets);\n\n    // normalizes pathes don't work with all native functions\n    // as a workaround, you can use the following 2 lines\n    const isWin = os.platform() === 'win32';\n    const workspaceRoot = !isWin\n      ? workspace.root\n      : asWindowsPath(workspace.root);\n    // if this is not necessary, use this:\n    // const workspaceRoot =  workspace.root;\n\n    try {\n      await deploy(\n        engine,\n        context,\n        path.join(workspaceRoot, outputPath),\n        options\n      );\n    } catch (e) {\n      context.logger.error('Error when trying to deploy:', e);\n      console.error(e);\n      return { success: false };\n    }\n\n    return { success: true };\n  }\n);\n\nconst fs = require('fs');\nfunction readFileAsync<T>(path: string): Promise<T> {\n  return new Promise((res, rej) => {\n    fs.readFile(path, 'utf8', function(err, contents) {\n      if (err) rej(err);\n\n      res(contents);\n    });\n  });\n}\n\nasync function getLibraryOutputPath(\n  targets: experimental.workspace.WorkspaceTool\n) {\n  const ngPackagePath = targets.build.options.project;\n\n  try {\n    const dataStr = await readFileAsync<string>(ngPackagePath);\n    const data = JSON.parse(dataStr);\n\n    const fullPath = (data.dest as string).replace(/\\.\\.\\//g, '');\n\n    return fullPath;\n  } catch (err) {\n    throw new Error('An error occurs reading the ng-package.json');\n  }\n}\n"]}