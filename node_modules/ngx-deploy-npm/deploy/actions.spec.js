"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const actions_1 = __importDefault(require("./actions"));
let context;
const mockEngine = { run: (_, __, __2) => Promise.resolve() };
const PROJECT = 'pirojok-project';
describe('Deploy Angular apps', () => {
    beforeEach(() => initMocks());
    describe('Builder', () => {
        let spy;
        beforeEach(() => {
            spy = jest.spyOn(context, 'scheduleTarget');
        });
        it('should invoke the builder', () => __awaiter(this, void 0, void 0, function* () {
            yield actions_1.default(mockEngine, context, 'host', {});
            expect(spy).toHaveBeenCalledWith({
                target: 'build',
                project: PROJECT
            });
        }));
        it('should invoke the builder with the right configuration', () => __awaiter(this, void 0, void 0, function* () {
            const customConf = 'my-custom-conf';
            yield actions_1.default(mockEngine, context, 'host', {
                configuration: customConf
            });
            expect(spy).toHaveBeenCalledWith({
                target: 'build',
                project: PROJECT,
                configuration: customConf
            });
        }));
    });
    it('should invoke engine.run', () => __awaiter(this, void 0, void 0, function* () {
        const spy = spyOn(mockEngine, 'run').and.callThrough();
        yield actions_1.default(mockEngine, context, 'host', {});
        expect(spy).toHaveBeenCalledWith('host', {}, context.logger);
    }));
    describe('error handling', () => {
        it('throws if there is no target project', () => __awaiter(this, void 0, void 0, function* () {
            context.target = undefined;
            try {
                yield actions_1.default(mockEngine, context, 'host', {});
                fail();
            }
            catch (e) {
                expect(e.message).toMatch(/Cannot execute the build target/);
            }
        }));
    });
});
const initMocks = () => {
    context = {
        target: {
            configuration: 'production',
            project: PROJECT,
            target: 'foo'
        },
        builder: {
            builderName: 'mock',
            description: 'mock',
            optionSchema: false
        },
        currentDirectory: 'cwd',
        id: 1,
        logger: new core_1.logging.NullLogger(),
        workspaceRoot: 'cwd',
        addTeardown: _ => { },
        validateOptions: _ => Promise.resolve({}),
        getBuilderNameForTarget: () => Promise.resolve(''),
        analytics: null,
        getTargetOptions: (_) => Promise.resolve({}),
        reportProgress: (_, __, ___) => { },
        reportStatus: (_) => { },
        reportRunning: () => { },
        scheduleBuilder: (_, __, ___) => Promise.resolve({}),
        scheduleTarget: (_, __, ___) => Promise.resolve({})
    };
};
//# sourceMappingURL=actions.spec.js.map