"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const defaults_1 = require("./engine/defaults");
const publishableLibBuilder = '@angular-devkit/build-ng-packagr:build';
function getWorkspace(host) {
    const possibleFiles = ['/angular.json', '/.angular.json'];
    const path = possibleFiles.filter(path => host.exists(path))[0];
    const configBuffer = host.read(path);
    if (configBuffer === null) {
        throw new schematics_1.SchematicsException(`Could not find angular.json`);
    }
    const content = configBuffer.toString();
    let workspace;
    try {
        workspace = core_1.parseJson(content, core_1.JsonParseMode.Loose);
    }
    catch (e) {
        throw new schematics_1.SchematicsException(`Could not parse angular.json: ` + e.message);
    }
    return {
        path,
        workspace
    };
}
exports.ngAdd = () => (tree) => {
    const { path: workspacePath, workspace } = getWorkspace(tree);
    const libraries = getLibraries(workspace);
    if (libraries.length === 0) {
        throw new schematics_1.SchematicsException('There is no libraries to add this deployer');
    }
    libraries.forEach(lib => {
        if (lib.architect) {
            lib.architect['deploy'] = {
                builder: 'ngx-deploy-npm:deploy',
                options: {
                    access: defaults_1.npmAccess.public
                }
            };
        }
    });
    tree.overwrite(workspacePath, JSON.stringify(workspace, null, 2));
    return tree;
};
function getLibraries({ projects }) {
    return (Object.keys(projects)
        .map(projectKey => projects[projectKey])
        .filter(proj => proj.projectType === 'library' &&
        proj.architect &&
        proj.architect.build &&
        proj.architect.build.builder === publishableLibBuilder));
}
//# sourceMappingURL=ng-add.js.map