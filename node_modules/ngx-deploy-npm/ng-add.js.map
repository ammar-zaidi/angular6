{"version":3,"file":"ng-add.js","sourceRoot":"","sources":["../ng-add.ts"],"names":[],"mappings":";;AAAA,2DAAuE;AACvE,+CAA8E;AAE9E,gDAA8C;AAE9C,MAAM,qBAAqB,GAAG,wCAAwC,CAAC;AAEvE,SAAS,YAAY,CACnB,IAAU;IAEV,MAAM,aAAa,GAAG,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;IAC1D,MAAM,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhE,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,IAAI,YAAY,KAAK,IAAI,EAAE;QACzB,MAAM,IAAI,gCAAmB,CAAC,6BAA6B,CAAC,CAAC;KAC9D;IACD,MAAM,OAAO,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC;IAExC,IAAI,SAAiD,CAAC;IACtD,IAAI;QACF,SAAS,GAAI,gBAAS,CACpB,OAAO,EACP,oBAAa,CAAC,KAAK,CAC6B,CAAC;KACpD;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,gCAAmB,CAAC,gCAAgC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;KAC7E;IAED,OAAO;QACL,IAAI;QACJ,SAAS;KACV,CAAC;AACJ,CAAC;AAGY,QAAA,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC,IAAU,EAAE,EAAE;IACxC,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IAE9D,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;IAG1C,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;QAC1B,MAAM,IAAI,gCAAmB,CAAC,4CAA4C,CAAC,CAAC;KAC7E;IAED,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAEtB,IAAI,GAAG,CAAC,SAAS,EAAE;YACjB,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG;gBACxB,OAAO,EAAE,uBAAuB;gBAChC,OAAO,EAAE;oBACP,MAAM,EAAE,oBAAS,CAAC,MAAM;iBACzB;aACF,CAAC;SACH;IACH,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAClE,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAMF,SAAS,YAAY,CAAC,EACpB,QAAQ,EAC+B;IACvC,OAAO,CACL,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;SAClB,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SAEvC,MAAM,CACL,IAAI,CAAC,EAAE,CACL,IAAI,CAAC,WAAW,KAAK,SAAS;QAC9B,IAAI,CAAC,SAAS;QACd,IAAI,CAAC,SAAS,CAAC,KAAK;QACpB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,KAAK,qBAAqB,CACzD,CACJ,CAAC;AACJ,CAAC","sourcesContent":["import { SchematicsException, Tree } from '@angular-devkit/schematics';\nimport { experimental, JsonParseMode, parseJson } from '@angular-devkit/core';\n\nimport { npmAccess } from './engine/defaults';\n\nconst publishableLibBuilder = '@angular-devkit/build-ng-packagr:build';\n\nfunction getWorkspace(\n  host: Tree\n): { path: string; workspace: experimental.workspace.WorkspaceSchema } {\n  const possibleFiles = ['/angular.json', '/.angular.json'];\n  const path = possibleFiles.filter(path => host.exists(path))[0];\n\n  const configBuffer = host.read(path);\n  if (configBuffer === null) {\n    throw new SchematicsException(`Could not find angular.json`);\n  }\n  const content = configBuffer.toString();\n\n  let workspace: experimental.workspace.WorkspaceSchema;\n  try {\n    workspace = (parseJson(\n      content,\n      JsonParseMode.Loose\n    ) as {}) as experimental.workspace.WorkspaceSchema;\n  } catch (e) {\n    throw new SchematicsException(`Could not parse angular.json: ` + e.message);\n  }\n\n  return {\n    path,\n    workspace\n  };\n}\n\n// TODO, specify which library set the deployer\nexport const ngAdd = () => (tree: Tree) => {\n  const { path: workspacePath, workspace } = getWorkspace(tree);\n\n  const libraries = getLibraries(workspace);\n\n  // If there is no libraries to install throw an exception\n  if (libraries.length === 0) {\n    throw new SchematicsException('There is no libraries to add this deployer');\n  }\n\n  libraries.forEach(lib => {\n    /* istanbul ignore else  */\n    if (lib.architect) {\n      lib.architect['deploy'] = {\n        builder: 'ngx-deploy-npm:deploy',\n        options: {\n          access: npmAccess.public\n        }\n      };\n    }\n  });\n\n  tree.overwrite(workspacePath, JSON.stringify(workspace, null, 2));\n  return tree;\n};\n\n/**\n * Get the libraries present in the workspace\n * @param workspace\n */\nfunction getLibraries({\n  projects\n}: experimental.workspace.WorkspaceSchema): experimental.workspace.WorkspaceProject[] {\n  return (\n    Object.keys(projects)\n      .map(projectKey => projects[projectKey])\n      // Check if the library is a publishable library (nx compatibility)\n      .filter(\n        proj =>\n          proj.projectType === 'library' &&\n          proj.architect &&\n          proj.architect.build &&\n          proj.architect.build.builder === publishableLibBuilder\n      )\n  );\n}\n"]}