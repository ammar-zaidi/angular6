{"version":3,"file":"ng-add.spec.js","sourceRoot":"","sources":["../ng-add.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tree } from '@angular-devkit/schematics';\nimport { experimental } from '@angular-devkit/core';\n\nimport { ngAdd } from './ng-add';\n\ndescribe('ng-add', () => {\n  let originalAngularJSON: experimental.workspace.WorkspaceSchema;\n  let expectedAngularJSON: experimental.workspace.WorkspaceSchema;\n\n  beforeEach(() => {\n    originalAngularJSON = {\n      version: 1,\n      projects: {\n        testing: {\n          projectType: 'application',\n          schematics: {\n            '@nrwl/angular:component': {\n              style: 'scss'\n            }\n          },\n          root: 'apps/testing',\n          sourceRoot: 'apps/testing/src',\n          prefix: 'myworkspace',\n          architect: {\n            build: {\n              a: 'a',\n              b: 'b'\n            }\n          }\n        },\n        publishable: {\n          projectType: 'library',\n          root: 'libs/publishable',\n          sourceRoot: 'libs/publishable/src',\n          prefix: 'myworkspace',\n          architect: {\n            build: {\n              builder: '@angular-devkit/build-ng-packagr:build',\n              a: 'a',\n              b: 'b'\n            }\n          },\n          schematics: {}\n        },\n        publishable2: {\n          projectType: 'library',\n          root: 'libs/publishable',\n          sourceRoot: 'libs/publishable/src',\n          prefix: 'myworkspace',\n          architect: {\n            build: {\n              builder: '@angular-devkit/build-ng-packagr:build',\n              a: 'a',\n              b: 'b'\n            }\n          },\n          schematics: {}\n        },\n        'non-publishable': {\n          projectType: 'library',\n          root: 'libs/non-publishable',\n          sourceRoot: 'libs/non-publishable/src',\n          prefix: 'myworkspace',\n          architect: {\n            lint: {\n              a: 'a',\n              b: 'b'\n            }\n          },\n          schematics: {}\n        },\n        'non-publishable2': {\n          projectType: 'library',\n          root: 'libs/non-publishable',\n          sourceRoot: 'libs/non-publishable/src',\n          prefix: 'myworkspace',\n          architect: {\n            lint: {\n              a: 'a',\n              b: 'b'\n            }\n          },\n          schematics: {}\n        }\n      },\n      defaultProject: 'testing'\n    };\n\n    expectedAngularJSON = JSON.parse(JSON.stringify(originalAngularJSON));\n\n    ['publishable', 'publishable2']\n      .map(\n        publishableProjectKey =>\n          expectedAngularJSON.projects[publishableProjectKey]\n      )\n      .forEach(project => {\n        if (project.architect) {\n          project.architect.deploy = {\n            builder: 'ngx-deploy-npm:deploy',\n            options: {\n              access: 'public'\n            }\n          };\n        }\n      });\n  });\n\n  describe('generating files', () => {\n    let tree: Tree;\n\n    beforeEach(() => {\n      tree = Tree.empty();\n      tree.create('angular.json', JSON.stringify(originalAngularJSON));\n    });\n\n    it('should set the deployer only on publishable libraries', () => {\n      const result = ngAdd()(tree);\n\n      const angularJsonModified = JSON.parse(\n        result.read('angular.json')!.toString()\n      );\n\n      expect(angularJsonModified).toEqual(expectedAngularJSON);\n    });\n  });\n\n  describe('error handling', () => {\n    it('Should throw if angular.json not found', () => {\n      expect(() => ngAdd()(Tree.empty())).toThrowError(\n        'Could not find angular.json'\n      );\n    });\n\n    it('Should throw if angular.json can not be parsed', () => {\n      const tree = Tree.empty();\n      tree.create('angular.json', 'hi');\n      expect(() => ngAdd()(tree)).toThrowError('Could not parse angular.json');\n    });\n\n    it('Should throw if angular.json can not be parsed', () => {\n      expect(() => ngAdd()(Tree.empty())).toThrowError(\n        'Could not find angular.json'\n      );\n    });\n\n    it('should throw if there is no library to add the deployer', () => {\n      // Delete all libraries\n      Object.keys(originalAngularJSON.projects)\n        .filter(\n          projectKey =>\n            originalAngularJSON.projects[projectKey].projectType === 'library'\n        )\n        .forEach(libraryKey => {\n          delete originalAngularJSON.projects[libraryKey];\n        });\n      const treeWithoutLibs = Tree.empty();\n      treeWithoutLibs.create(\n        'angular.json',\n        JSON.stringify(originalAngularJSON)\n      );\n\n      expect(() => ngAdd()(treeWithoutLibs)).toThrowError(\n        'There is no libraries to add this deployer'\n      );\n    });\n  });\n});\n"]}