"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fs = __importStar(require("./utils/fs-async"));
const exec_async_1 = require("./utils/exec-async");
const defaults_1 = require("./defaults");
function run(dir, options, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            options = prepareOptions(options, logger);
            if (options.packageVersion && !options.dryRun) {
                yield setPackageVersion(dir, options);
            }
            const npmOptions = extractOnlyNPMOptions(options);
            const commandToPublish = `npm publish ${dir} ${getOptionsString(npmOptions)}`;
            const { stdout, stderr } = yield exec_async_1.execAsync(commandToPublish);
            logger.info(stdout);
            logger.info(stderr);
            if (options.dryRun) {
                logger.info('The options are:');
                logger.info(JSON.stringify(options, null, 1));
            }
            logger.info('🚀 Successfully published via ngx-deploy-npm! Have a nice day!');
        }
        catch (error) {
            logger.error('❌ An error occurred!');
            throw error;
        }
    });
}
exports.run = run;
function setPackageVersion(dir, options) {
    return __awaiter(this, void 0, void 0, function* () {
        let packageContent = yield fs.readFileAsync(path.join(dir, 'package.json'), { encoding: 'utf8' });
        let packageObj = JSON.parse(packageContent);
        packageObj.version = options.packageVersion;
        yield fs.writeFileAsync(path.join(dir, 'package.json'), JSON.stringify(packageObj, null, 4), { encoding: 'utf8' });
    });
}
function extractOnlyNPMOptions({ access, tag, otp, dryRun }) {
    return {
        access,
        tag,
        otp,
        dryRun
    };
}
function prepareOptions(origOptions, logger) {
    const options = Object.assign({}, defaults_1.defaults, origOptions);
    if (options.dryRun) {
        logger.info('Dry-run: No changes are applied at all.');
    }
    return options;
}
function getOptionsString(options) {
    return (Object.keys(options)
        .filter(optKey => !!options[optKey])
        .map(optKey => ({
        cmdOptions: `--${toKebabCase(optKey)}`,
        value: options[optKey]
    }))
        .map(cmdOptionValue => `${cmdOptionValue.cmdOptions} ${cmdOptionValue.value}`)
        .join(' '));
    function toKebabCase(str) {
        return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();
    }
}
//# sourceMappingURL=engine.js.map