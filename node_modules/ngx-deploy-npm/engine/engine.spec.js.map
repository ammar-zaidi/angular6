{"version":3,"file":"engine.spec.js","sourceRoot":"","sources":["../../engine/engine.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { logging } from '../__mocks__/utils/dev-kit-logger';\n\nimport * as engine from './engine';\n\nimport { Schema } from '../deploy/schema';\nimport { npmAccess } from './defaults';\n\nimport * as exec from './utils/exec-async';\n\nimport * as fs from './utils/fs-async';\nimport { PromiseWithChild } from 'child_process';\n\ndescribe('engine', () => {\n  let dir: string;\n  let options: Schema;\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // Spies\n  beforeEach(() => {\n    jest.spyOn(exec, 'execAsync').mockImplementation(\n      () =>\n        Promise.resolve({\n          stdout: 'package published',\n          stderr: undefined\n        }) as PromiseWithChild<any>\n    );\n  });\n\n  // Data\n  beforeEach(() => {\n    dir = 'customDir';\n  });\n\n  it('should call NPM Publish with the right options', done => {\n    options = {\n      access: npmAccess.restricted,\n      tag: 'next',\n      otp: 'someValue',\n      configuration: 'stageConfig',\n      dryRun: true\n    };\n    const optionsOnCMD = `--access ${options.access} --tag ${options.tag} --otp ${options.otp} --dry-run ${options.dryRun}`;\n\n    engine\n      .run(dir, options, logging)\n      .then(() => {\n        expect(exec.execAsync).toHaveBeenCalledWith(\n          `npm publish ${dir} ${optionsOnCMD}`\n        );\n        done();\n      })\n      .catch(err => fail('should be completed' + err));\n  });\n\n  it('should indicate that an error occurred when there is an error publishing the package', done => {\n    const customErr = 'custom err';\n    jest\n      .spyOn(exec, 'execAsync')\n      .mockImplementation(\n        () => Promise.reject(customErr) as PromiseWithChild<any>\n      );\n\n    engine\n      .run(dir, options, logging)\n      .then(() => fail('should enter in the catch section'))\n      .catch(err => {\n        expect(customErr).toEqual(err);\n        done();\n      });\n  });\n\n  describe('Options Management', () => {\n    it('should set the default options', done => {\n      const options: Schema = {};\n      const optionsOnCMD = `--access public`;\n\n      engine\n        .run(dir, options, logging)\n        .then(() => {\n          expect(exec.execAsync).toHaveBeenCalledWith(\n            `npm publish ${dir} ${optionsOnCMD}`\n          );\n          done();\n        })\n        .catch(err => fail('should be completed' + err));\n    });\n\n    it('should overwrite the default option dry-run', done => {\n      const options: Schema = {\n        otp: 'random-text',\n        dryRun: true,\n        tag: 'random-tag'\n      };\n      const optionsOnCMD = `--access public --tag ${options.tag} --otp ${options.otp} --dry-run true`;\n\n      engine\n        .run(dir, options, logging)\n        .then(() => {\n          expect(exec.execAsync).toHaveBeenCalledWith(\n            `npm publish ${dir} ${optionsOnCMD}`\n          );\n          done();\n        })\n        .catch(err => fail('should be completed' + err));\n    });\n\n    it('should overwrite the default option dry-run and access', done => {\n      const options = {\n        dryRun: true,\n        tag: 'random-tag',\n        access: npmAccess.restricted\n      };\n      const optionsOnCMD = `--access ${npmAccess.restricted} --tag ${options.tag} --dry-run true`;\n\n      engine\n        .run(dir, options, logging)\n        .then(() => {\n          expect(exec.execAsync).toHaveBeenCalledWith(\n            `npm publish ${dir} ${optionsOnCMD}`\n          );\n          done();\n        })\n        .catch(err => fail('should be completed' + err));\n    });\n  });\n\n  describe('Package.json Feature', () => {\n    let myPackageJSON: object;\n    let expectedPackage: object;\n    let version: string;\n    let options: Schema;\n\n    // Spies\n    beforeEach(() => {\n      jest\n        .spyOn(fs, 'readFileAsync')\n        .mockImplementation(() =>\n          Promise.resolve(JSON.stringify(myPackageJSON))\n        );\n\n      jest\n        .spyOn(fs, 'writeFileAsync')\n        .mockImplementation(() => Promise.resolve());\n    });\n\n    // Data\n    beforeEach(() => {\n      version = '1.0.1-next0';\n\n      myPackageJSON = {\n        name: 'ngx-deploy-npm',\n        version: 'boilerPlate',\n        description:\n          'Publish your angular packages to npm by just run `npm deploy your-packages`',\n        main: 'index.js'\n      };\n\n      expectedPackage = {\n        ...myPackageJSON,\n        version\n      };\n\n      options = {\n        packageVersion: version\n      };\n    });\n\n    it('should write the version of the sent on the package.json', done => {\n      engine\n        .run(dir, options, logging)\n        .then(() => {\n          expect(fs.writeFileAsync).toHaveBeenCalledWith(\n            `${dir}/package.json`,\n            JSON.stringify(expectedPackage, null, 4),\n            { encoding: 'utf8' }\n          );\n          done();\n        })\n        .catch(err => fail('should be completed' + err));\n    });\n\n    it('should not write the version of the sent on the package.json if is on dry-run mode', done => {\n      options.dryRun = true;\n      engine\n        .run(dir, options, logging)\n        .then(() => {\n          expect(fs.writeFileAsync).not.toHaveBeenCalled();\n          done();\n        })\n        .catch(err => fail('should be completed' + err));\n    });\n\n    describe('Errors', () => {\n      afterEach(() => {\n        jest.clearAllMocks();\n      });\n\n      it('should throw an error if there is an error reading the package.json', done => {\n        const customErr = 'custom err';\n        jest\n          .spyOn(fs, 'readFileAsync')\n          .mockImplementation(() => Promise.reject(customErr));\n\n        engine\n          .run(dir, options, logging)\n          .then(() => fail('should enter in the catch section'))\n          .catch(err => {\n            expect(customErr).toEqual(err);\n            done();\n          });\n      });\n\n      it('should throw an error if there is an error writing the package.json', done => {\n        const customErr = 'custom err';\n        jest\n          .spyOn(fs, 'writeFileAsync')\n          .mockImplementation(() => Promise.reject(customErr));\n\n        engine\n          .run(dir, options, logging)\n          .then(() => fail('should enter in the catch section'))\n          .catch(err => {\n            expect(customErr).toEqual(err);\n            done();\n          });\n      });\n    });\n  });\n});\n"]}