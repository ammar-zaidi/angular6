{"version":3,"file":"engine.js","sourceRoot":"","sources":["../../engine/engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { logging } from '@angular-devkit/core';\nimport * as path from 'path';\n\nimport * as fs from './utils/fs-async';\nimport { execAsync } from './utils/exec-async';\n\nimport { Schema } from '../deploy/schema';\nimport { defaults } from './defaults';\n\nexport async function run(\n  dir: string,\n  options: Schema,\n  logger: logging.LoggerApi\n) {\n  try {\n    options = prepareOptions(options, logger);\n\n    // If we are not on dry run\n    if (options.packageVersion && !options.dryRun) {\n      await setPackageVersion(dir, options);\n    }\n\n    const npmOptions = extractOnlyNPMOptions(options);\n    const commandToPublish = `npm publish ${dir} ${getOptionsString(\n      npmOptions\n    )}`;\n\n    const { stdout, stderr } = await execAsync(commandToPublish);\n\n    logger.info(stdout);\n    logger.info(stderr);\n\n    if (options.dryRun) {\n      logger.info('The options are:');\n      logger.info(JSON.stringify(options, null, 1));\n    }\n\n    logger.info(\n      '🚀 Successfully published via ngx-deploy-npm! Have a nice day!'\n    );\n  } catch (error) {\n    logger.error('❌ An error occurred!');\n    throw error;\n  }\n}\n\nasync function setPackageVersion(dir: string, options: Schema) {\n  let packageContent: string = await fs.readFileAsync(\n    path.join(dir, 'package.json'),\n    { encoding: 'utf8' }\n  );\n\n  let packageObj: any = JSON.parse(packageContent);\n\n  packageObj.version = options.packageVersion;\n\n  await fs.writeFileAsync(\n    path.join(dir, 'package.json'),\n    JSON.stringify(packageObj, null, 4),\n    { encoding: 'utf8' }\n  );\n}\n\n/**\n * Extract only the options that the `npm publish` command can process\n *\n * @param param0 All the options sent to ng deploy\n */\nfunction extractOnlyNPMOptions({ access, tag, otp, dryRun }: Schema) {\n  return {\n    access,\n    tag,\n    otp,\n    dryRun\n  };\n}\n\nfunction prepareOptions(origOptions: Schema, logger: logging.LoggerApi) {\n  const options = {\n    ...defaults,\n    ...origOptions\n  };\n\n  if (options.dryRun) {\n    logger.info('Dry-run: No changes are applied at all.');\n  }\n\n  return options;\n}\n\nfunction getOptionsString(options: Schema) {\n  return (\n    Object.keys(options)\n      // Get only options with value\n      .filter(optKey => !!options[optKey])\n      // to CMD option\n      .map(optKey => ({\n        cmdOptions: `--${toKebabCase(optKey)}`,\n        value: options[optKey]\n      }))\n      // to string\n      .map(\n        cmdOptionValue => `${cmdOptionValue.cmdOptions} ${cmdOptionValue.value}`\n      )\n      .join(' ')\n  );\n\n  function toKebabCase(str: string) {\n    return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();\n  }\n}\n"]}